// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum languages {
  afrikaans
  albanian
  amharic
  arabic
  armenian
  assamese
  azerbaijani
  basque
  belarusian
  bengali
  bosnian
  bulgarian
  burmese
  catalan
  cebuano
  chichewa
  chinese
  corsican
  croatian
  czech
  danish
  dutch
  english
  esperanto
  estonian
  filipino
  finnish
  french
  frisian
  galician
  georgian
  german
  greek
  gujarati
  haitian_creole
  hausa
  hawaiian
  hebrew
  hindi
  hmong
  hungarian
  icelandic
  igbo
  indonesian
  irish
  italian
  japanese
  javanese
  kannada
  kazakh
  khmer
  kinyarwanda
  korean
  kurdish
  kyrgyz
  lao
  latin
  latvian
  lithuanian
  luxembourgish
  macedonian
  malagasy
  malay
  malayalam
  maltese
  maori
  marathi
  mongolian
  nepali
  norwegian
  odia
  pashto
  persian
  polish
  portuguese
  punjabi
  romanian
  russian
  samoan
  scots_gaelic
  serbian
  sesotho
  shona
  sindhi
  sinhala
  slovak
  slovenian
  somali
  spanish
  sundanese
  swahili
  swedish
  tajik
  tamil
  tatar
  telugu
  thai
  turkish
  turkmen
  ukrainian
  urdu
  uyghur
  uzbek
  vietnamese
  welsh
  xhosa
  yiddish
  yoruba
  zulu
}



model User {
  uid String @id @default(uuid())
  firstName String @map("first_name")
  lastName String @map("last_name")
  email String @unique 
  password String
  passwordChangeAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books Book[]

  @@index([uid])
  @@map("users")
}

model Author {
  uid String @id @default(uuid())
  name String
  bio String?
  books Book[]

  @@map("authors")
  @@index([uid])
}

model Genre {
  uid String @id @default(uuid())
  name String
  description String?
  books Book[]

  @@map("genres")
  @@index([uid])
}

model Book {
  uid String @id @default(uuid())
  title String
  language languages
  publication_date DateTime?
  num_pages Int?
  author Author @relation(fields: [authorUid], references: [uid])
  authorUid String
  publisher User @relation(fields: [publisherUid], references: [uid])
  publisherUid String
  coverImagePath String?
  downloadPath String
  previewPath String
  num_downloads Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  genres Genre[]
}